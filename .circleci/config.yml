version: 2
jobs:
  build:
    parallelism: 3
    working_directory: ~/src
    docker:
      - image: circleci/ruby:2.5.0-node-browsers
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: lockstep
          RAILS_ENV: test
      - image: circleci/postgres:9.6.5-alpine
        environment:
          POSTGRES_USER: lockstep
    steps:
      - checkout

      - type: cache-restore
        name: Restore bundle cache
        key: bundle-{{ checksum "Gemfile.lock" }}

      - type: cache-restore
        name: Restore yarn cache
        key: yarn-{{ checksum "yarn.lock" }}

      - run:
          name: Install bundle
          command: bin/bundle install --path vendor/bundle

      - run:
          name: Install yarn dependencies
          command: yarn install

      - type: cache-save
        name: Store bundle cache
        key: bundle-{{ checksum "Gemfile.lock" }}
        paths:
          - vendor/bundle

      - type: cache-save
        name: Store yarn cache
        key: yarn-{{ checksum "yarn.lock" }}
        paths:
          - ~/.yarn-cache

      - run:
          name: Verify bundle security
          command: bundle exec bundle-audit check --update

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Database setup
      - run:
          name: Set up database
          command: |
            bundle exec rake db:create && bundle exec rake db:schema:load

      # Environment setup
      - run:
          name: Set up app environment
          command: cp config/application.yml.example config/application.yml

      # Run rspec in parallel
      - run:
          name: Run tests
          type: shell
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # Save test results for timing analysis
      - store_test_results:
          path: test_results

      # - deploy:
      #     name: Deploy to production
      #     command: |
      #       if [ "${CIRCLE_BRANCH}" == "master" ]; then
      #         [[ ! -s "$(git rev-parse --git-dir)/shallow" ]] || git fetch --unshallow
      #         git push git@heroku.com:<APPNAME>.git HEAD:master
      #         heroku run rake db:migrate --app <APPNAME>
      #         heroku restart --app <APPNAME>
      #       fi
